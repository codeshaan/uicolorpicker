{"version":3,"sources":["components/Color.js","components/Modal.js","components/colorconfig/ColorLength.js","components/colorconfig/Luminosity.js","components/colorconfig/Format.js","components/ColorConfig.js","App.js","serviceWorker.js","index.js"],"names":["Color","props","state","color","className","data-color","this","data-index","index","onClick","copyColor","title","style","background","type","changeColor","React","Component","Modal","showModal","backgroundColor","modalColor","SelectList","selectedValue","htmlFor","id","onChange","selectColorNumber","defaultValue","value","Luminosity","handleLuminosity","Format","handleColorFormat","ColorConfig","ColorLength","App","changeAllColors","colors","i","colorLength","randomColor","colorConfig","setState","e","luminosity","target","options","selectedIndex","colorFormat","format","toLowerCase","changeColorLuminosity","parentElement","getAttribute","navigator","clipboard","writeText","setTimeout","length","push","splice","console","log","hue","alpha","role","aria-label","map","key","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2471cc9a.chunk.js","sourcesContent":[" import React from \"react\";\r\n\r\nclass Color extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { color: \"\" };\r\n    \r\n  }\r\n\r\n  static getDerivedStateFromProps(props) {\r\n    return { color: props.color };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"color\"\r\n        data-color={this.state.color}\r\n        data-index={this.props.index}\r\n      >\r\n        <div\r\n          onClick={this.props.copyColor}\r\n          className=\"color-img\"\r\n          title=\"Click to copy me!\"\r\n          style={{ background: this.state.color }}\r\n        ></div>\r\n        <button\r\n          type=\"button\"\r\n          onClick={this.props.changeColor}\r\n          className=\"change-btn\"\r\n        >\r\n          CHANGE\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Color;","import React from \"react\";\r\n\r\nclass Modal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showModal: false\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps (props) {\r\n    return { showModal: props.showModal };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={(this.state.showModal ? 'modal active' : 'modal')} style={{ backgroundColor: this.props.modalColor }}>\r\n        <p>Copied....</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\n\r\n\r\nclass SelectList extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedValue: ''\r\n    }\r\n  }\r\n\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"select-container\">\r\n        <label htmlFor=\"\">Number of colors: </label>\r\n        <select className=\"select-list\" id=\"select-list\" onChange={this.props.selectColorNumber} defaultValue={5}>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"1\">1</option>\r\n        </select>\r\n      </div>\r\n    );\r\n    }\r\n\r\n}\r\n\r\nexport default SelectList;","import React from \"react\";\r\n\r\nclass Luminosity extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"select-container\">\r\n        <label htmlFor=\"\">Luminosity</label>\r\n        <select onChange={this.props.handleLuminosity} className=\"select-list\" defaultValue=\"Random\">\r\n          <option value=\"Random\">Random</option>\r\n          <option value=\"Light\">Light</option>\r\n          <option value=\"Dark\">Dark</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Luminosity;","import React from 'react';\r\n\r\nclass Format extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"select-container\">\r\n        <label htmlFor=\"\">Type</label>\r\n        <select onChange={this.props.handleColorFormat} className=\"select-list\" defaultValue=\"HEX\">\r\n          <option value=\"HEX\">HEX</option>\r\n          <option value=\"RGB\">RGB</option>\r\n          <option value=\"HSL\">HSL</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Format;","import React from 'react';\r\nimport ColorLength from './colorconfig/ColorLength';\r\nimport Luminosity from './colorconfig/Luminosity';\r\nimport Format from './colorconfig/Format';\r\n\r\n\r\nclass ColorConfig extends React.Component {\r\n  constructor (props) {\r\n    super(props);    \r\n    this.state = {};\r\n  }\r\n\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"config\">\r\n        <ColorLength selectColorNumber={this.props.selectColorNumber} />\r\n        <Luminosity handleLuminosity={this.props.handleLuminosity} />\r\n        <Format handleColorFormat={this.props.handleColorFormat} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default ColorConfig;","import React from \"react\";\nimport \"./App.css\";\nimport Color from \"./components/Color\";\nimport Modal from \"./components/Modal\";\nimport randomColor from \"randomcolor\";\nimport ColorConfig from \"./components/ColorConfig\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorConfig: {\n        luminosity: \"random\",\n        hue: \"random\",\n        format: \"hex\",\n        alpha: 1,\n      },\n      colorLength: 5,\n      colors: [],\n      showModal: false,\n      modalColor: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.changeAllColors();\n  }\n\n  changeAllColors = () => {\n    let { colors } = this.state;\n\n    for (let i = 0; i < this.state.colorLength; i++) {\n      colors[i] = randomColor(this.state.colorConfig);\n    }\n\n    this.setState({ colors });\n  };\n\n  handleLuminosity = e => {\n    const luminosity = e.target.options[e.target.selectedIndex].value;\n\n    let { colorConfig } = this.state;\n    colorConfig.luminosity = luminosity;\n\n    this.setState({ colorConfig });\n\n    this.changeAllColors();\n  };\n\n  handleColorFormat = e => {\n    let { colorConfig } = this.state;\n\n    let colorFormat = e.target.options[e.target.selectedIndex].value;\n    colorConfig.format = colorFormat.toLowerCase();\n    this.setState({ colorConfig });\n\n    this.changeAllColors();\n  };\n\n  changeColorLuminosity = e => {};\n\n  changeColor = e => {\n    const index = e.target.parentElement.getAttribute(\"data-index\");\n    let { colors } = this.state;\n    colors[index] = randomColor(this.state.colorConfig);\n\n    this.setState({ colors });\n  };\n\n  copyColor = e => {\n    const color = e.target.parentElement.getAttribute(\"data-color\");\n    navigator.clipboard.writeText(color);\n\n    this.showModal(color);\n  };\n\n  showModal = color => {\n    this.setState({ showModal: !this.state.showModal, modalColor: color });\n\n    setTimeout(() => {\n      this.setState({ showModal: !this.state.showModal });\n    }, 2000);\n  };\n\n  selectColorNumber = e => {\n    const colorLength = e.target.options[e.target.selectedIndex].value;\n    const { colors } = this.state;\n\n    if (this.state.colors.length < colorLength) {\n      while (colors.length !== +colorLength) {\n        colors.push(randomColor());\n      }\n    } else {\n      colors.splice(colorLength);\n    }\n\n    this.setState({ colorLength, colors });\n    console.log(colors);\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>\n          <span role=\"img\" aria-label=\"emoji\">\n            ⛏{\" \"}\n          </span>\n          UI Color Picker\n        </h1>\n        <ColorConfig\n          selectColorNumber={this.selectColorNumber}\n          handleLuminosity={this.handleLuminosity}\n          handleColorFormat={this.handleColorFormat}\n        />\n        <div className=\"color-container\">\n          {this.state.colors.map((color, index) => (\n            <Color\n              copyColor={this.copyColor}\n              index={index}\n              color={color}\n              key={randomColor().slice(1)}\n              changeColor={this.changeColor}\n            />\n          ))}\n        </div>\n        <Modal\n          showModal={this.state.showModal}\n          modalColor={this.state.modalColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// This tag syntax is neither a string nor HTML, it's JSX. JSX is a syntax extension to JavaScript.\n\n// Embedding expressions in JSX\n// const name = \"Shaan Alam\";\n// const element = <h1>Hello world! My name is {name}</h1>;\n\n// ReactDOM.render(element, document.querySelector(\"#root\"));\n\n/* \n\n  JSX is an expression too\n  After compilation, JSX expressions become regular Javascript function calls and evaluate to javascript objects.\n\n  function getGreeting (user) {\n    if (user) {\n      return <h1>hello, formatName(user)</h1>;\n    }\n    return <h1>Hello stranger!</h1>;\n  }\n\n\n  * We may use quotes to specify string literals as attributes\n  const element = <div tabIndex=\"0\"></div>;\n  or\n  const image = <img src={img.src} />\n\n  * We may also use curly braces to embed a javascript expression in an attribute;\n\n  * HTML attributes are named accoring to the camelCase convention in React. for Example class becomes className, & tabindex becomes tabIndex\n\n*/\n\n/* \n\n  * if a tag is empty we must close it immediately with self closing tag like XML\n\n  const element = <img src={img.src} />;\n\n  * JSX may contain children;\n  const element = (\n    <div>\n      <h1>Hello </h1>\n      <h2>Good to see you here. </h2>\n    </div>\n  );\n\n  * JSX prevents injection attacks. By default React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that's not explicitly written in your application. Everything is converted to a string before being rendered. This helps preventing XSS attacks.\n*/\n\n\n/* \n\n  Babel compiles JSX down to React.createElement() calls\n  const element = <h1 className=\"greeting\">Hello World !</h1> is equivalent to \n\n  const element = React.createElement('h1', {className: 'greeting'}, 'Hello World!');\n\n*/\n\n/* \n\n  Elements are what components are \"made of\"\n  elements < components\n\n  Rendering an element into the DOM\n  =======================================\n\n  <div id=\"root\"></div>\n  We call this a \"root\" DOM node because everything inside it will be managed by React DOM.\n\n  Applications built with just react usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.\n\n*/\n\n\n/* \n  React elements are immutable. Once we create an element, we can't change its children or attributes. An element is like a single frame in a movie. It represents the UI at a certain point in time.\n*/\n\n// function tick () {\n//   const element = (\n//     <div> \n//       <h1>Hello world!</h1>\n//       <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//     </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n\n// setInterval(tick, 1000);\n\n/* \n\nReact only updates what's necessary.\nReact DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.\n\nEven though we create an element describing the whole UI tree on every tick, only the text node whose contents have changed gets updated by React\n\n*/\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}